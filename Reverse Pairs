Problem Description
  Given an array of integers A, we call (i, j) an important reverse pair if i < j and A[i] > 2*A[j].
  Return the number of important reverse pairs in the given array A.

Problem Constraints
  1 <= length of the array <= 10^5
  -2 * 109 <= A[i] <= 2 * 109

Input Format
  The only argument given is the integer array A.
Output Format
  Return the number of important reverse pairs in the given array A.

Example Input
A = [1, 3, 2, 3, 1]  ans = 2, There are two pairs which are important reverse i.e (3, 1) and (3, 1).

A = [4, 1, 2]. ans = 1, There is only one pair i.e (4, 1).



Solution - 

int revCount(vector<int> &A, vector<int> &temp, int start, int end);

int mergeCount(vector<int> &A, vector<int> &temp, int start, int mid, int end){
    int p1 = start, p2 = mid+1;
    int p3 = start;
    long count = 0;
    int mod = 1e9+7;
    int j = mid +1;
    for(int i = start; i<=mid; i++){
        while( j<=end && A[i] > (2LL* A[j])){           
            j++;
        }
        count += j - (mid +1);  
    }

    while(p1<= mid && p2 <=end){
        if (A[p1]<=A[p2]){
            temp[p3] = A[p1];
            p3++, p1++;
        }
        else{
            temp[p3] = A[p2];
            p3++, p2++;
        }
    }
    while(p1 <= mid){
        temp[p3] = A[p1];
        p3++, p1++;
    }

    while(p2 <= end){
        temp[p3] = A[p2];
        p3++, p2++;
    } 

    for(int i = start; i<=end; i++){
        A[i] = temp[i];
    }
    return (count + mod)%mod;
}

int revCount(vector<int> &A, vector<int> &temp, int start, int end){
    int inv = 0;
    int mod = 1e9+7;

    if (start < end){
        int mid = (start + end)/2;
        inv += revCount(A, temp, start, mid); // ans of first part
        inv += revCount(A, temp, mid+1, end); // ans of second part
        inv += mergeCount(A, temp, start, mid, end); // ans after merging both part
    }
    return inv% mod;
}

int Solution::solve(vector<int> &A) {
    int n = A.size();
    vector<int> temp(n, 0);
    return revCount(A, temp, 0, n-1);
}

 
