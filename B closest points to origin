Problem Description
  We have a list A of points (x, y) on the plane. Find the B closest points to the origin (0, 0).
  Here, the distance between two points on a plane is the Euclidean distance.
  You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)

NOTE: Euclidean distance between two points P1(x1, y1) and P2(x2, y2) is sqrt( (x1-x2)2 + (y1-y2)2 ).

Problem Constraints
  1 <= B <= length of the list A <= 105
  -10^5 <= A[i][0] <= 10^5
  -10^5 <= A[i][1] <= 10^5

Input Format
  The argument given is list A and an integer B.
Output Format
  Return the B closest points to the origin (0, 0) in any order.
  
  
Approach - sort 2d vector using comparator based on distance from origin

solution - 

bool comparator(vector<int> a, vector<int> b){
    long dist1 = (long)a[0]* a[0] + (long)a[1]* a[1];
    long dist2 = (long)b[0]* b[0] + (long)b[1]* b[1];
    return dist1<dist2;
}

vector<vector<int> > Solution::solve(vector<vector<int> > &A, int B) {
    vector< vector<int>> res;
    sort(A.begin(), A.end(), comparator);
    for(int i= 0; i<B; i++){
        res.push_back(A[i]);
    }
    return res;
}

// TC : O(NLOGN) SC: O(1)
